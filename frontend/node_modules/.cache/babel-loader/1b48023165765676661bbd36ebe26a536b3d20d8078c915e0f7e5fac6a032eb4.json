{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-945499d2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container mt-5\"\n};\nconst _hoisted_2 = {\n  class: \"text-center mb-4\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"question\"\n};\nconst _hoisted_5 = {\n  class: \"answers\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", null, \"Результаты викторины:\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"Вопрос:\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"Ваш ответ:\", -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"Правильный ответ:\", -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_13 = {\n  key: 2\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Викторина завершена!\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, _toDisplayString($data.quiz.name), 1 /* TEXT */), $options.currentQuestion && !$data.quizCompleted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h5\", null, _toDisplayString($options.currentQuestion.question_text), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.shuffledAnswers, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"btn btn-outline-primary my-1\",\n      onClick: $event => $options.selectAnswer(answer)\n    }, _toDisplayString(answer.answer_text), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])])) : $data.quizCompleted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_hoisted_8, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.answers, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"p\", null, [_hoisted_9, _createTextVNode(\" \" + _toDisplayString($data.questions.find(question => question.id === answer.questionId).question_text), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_hoisted_10, _createTextVNode(\" \" + _toDisplayString(answer.userAnswer), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_hoisted_11, _createTextVNode(\" \" + _toDisplayString($data.questions.find(question => question.id === answer.questionId)), 1 /* TEXT */)]), _hoisted_12]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.finishQuiz && $options.finishQuiz(...args))\n  }, \"Завершить\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_hoisted_14, _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.finishQuiz && $options.finishQuiz(...args))\n  }, \"Завершить\")]))]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","quiz","name","$options","currentQuestion","quizCompleted","_hoisted_3","_hoisted_4","question_text","_hoisted_5","_Fragment","_renderList","shuffledAnswers","answer","index","onClick","$event","selectAnswer","answer_text","_hoisted_6","_hoisted_7","_hoisted_8","answers","_hoisted_9","_createTextVNode","questions","find","question","id","questionId","_hoisted_10","userAnswer","_hoisted_11","_hoisted_12","_cache","args","finishQuiz","_hoisted_13","_hoisted_14"],"sources":["X:\\Downoloads\\SecondProject\\SecondProject\\frontend\\src\\components\\quiz\\GoQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <h3 class=\"text-center mb-4\">{{ quiz.name }}</h3>\r\n    <div v-if=\"currentQuestion && !quizCompleted\">\r\n      <div class=\"question\">\r\n        <h5>{{ currentQuestion.question_text }}</h5>\r\n      </div>\r\n      <div class=\"answers\">\r\n        <div\r\n          v-for=\"(answer, index) in shuffledAnswers\"\r\n          :key=\"index\"\r\n          class=\"btn btn-outline-primary my-1\"\r\n          @click=\"selectAnswer(answer)\"\r\n        >\r\n          {{ answer.answer_text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"quizCompleted\">\r\n      <h4>Результаты викторины:</h4>\r\n      <div v-for=\"(answer, index) in answers\" :key=\"index\">\r\n        <p><strong>Вопрос:</strong> {{ questions.find(question => question.id === answer.questionId).question_text }}</p>\r\n        <p><strong>Ваш ответ:</strong> {{ answer.userAnswer }}</p>\r\n        <p><strong>Правильный ответ:</strong> {{ questions.find(question => question.id === answer.questionId) }}</p>\r\n        <hr>\r\n      </div>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n\r\n    <div v-else>\r\n      <p>Викторина завершена!</p>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport http from \"../../http-common\";\r\n\r\nexport default {\r\n  name: \"GoQuiz\",\r\n  data() {\r\n    return {\r\n      quiz: {},\r\n      questions: [],\r\n      currentQuestionIndex: 0,\r\n      answers: [],\r\n      shuffledAnswers: [],\r\n      quizCompleted: false, // Состояние завершенности викторины\r\n    };\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\r\n    }\r\n  },\r\n  methods: {\r\n    // Получение данных викторины\r\n    fetchQuiz() {\r\n      const quizId = this.$route.params.id;\r\n      if (quizId) {\r\n        http.get(`/getQuiz/${quizId}`)\r\n          .then(response => {\r\n            console.log(response.data); // Проверяем структуру данных\r\n            this.quiz = response.data.quizz;\r\n            this.questions = response.data.questions; // Убедитесь, что здесь массив вопросов\r\n            console.log(this.questions);\r\n            this.shuffleAnswers();\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Ошибка при получении викторины: \", error);\r\n          });\r\n      } else {\r\n        console.error(\"ID викторины не найден в URL.\");\r\n      }\r\n    },\r\n    // Перемешивание ответов текущего вопроса\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\r\n      }\r\n    },\r\n    // Выбор ответа\r\n    selectAnswer(answer) {\r\n      // Проверяем, есть ли текущий вопрос\r\n      if (!this.currentQuestion) {\r\n        console.error(\"Текущий вопрос не определен.\"); // Защита от ошибок\r\n        return;\r\n      }\r\n\r\n      // Сохраняем ответ пользователя\r\n      console.log(answer);\r\n      this.answers.push({\r\n        questionId: this.currentQuestion.id, // Получаем id текущего вопроса\r\n        userAnswer: answer.answer_text,\r\n        isCorrect: answer.isCorrect\r\n      });\r\n\r\n      // Увеличиваем индекс текущего вопроса\r\n      this.currentQuestionIndex++;\r\n\r\n      // Проверяем, достигли ли мы конца вопросов\r\n      if (this.currentQuestionIndex < this.questions.length) {\r\n        // Если вопросы остались, перемешиваем ответы следующего вопроса\r\n        this.shuffleAnswers();\r\n      } else {\r\n        // Если вопросов больше нет, помечаем викторину как завершенную\r\n        this.quizCompleted = true;\r\n      }\r\n    },\r\n    // Завершение викторины\r\n    finishQuiz() {\r\n      const results = {\r\n        quizId: this.quiz.id,\r\n        answers: this.answers\r\n      };\r\n      http.post(\"/submitResults\", results)\r\n        .then(() => {\r\n          alert(\"Результаты успешно сохранены!\");\r\n          this.$router.push(\"/allQuizzes\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Ошибка при сохранении результатов: \", error);\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center; /* Центрируем текст внутри контейнера */\r\n}\r\n\r\nh3 {\r\n  font-weight: bold; /* Жирный шрифт */\r\n  font-size: 24px; /* Размер шрифта */\r\n  margin-bottom: 20px; /* Отступ снизу */\r\n  color: #2c3e50; /* Цвет заголовка */\r\n}\r\n\r\n.question {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.answers {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center; /* Центрируем кнопки по горизонтали */\r\n}\r\n\r\n.btn {\r\n  width: 100%; /* Задаем ширину кнопок, чтобы они заполняли контейнер */\r\n  max-width: 300px; /* Ограничиваем максимальную ширину кнопок */\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;EACrBA,KAAK,EAAC;AAAkB;;EAFhCC,GAAA;AAAA;;EAIWD,KAAK,EAAC;AAAU;;EAGhBA,KAAK,EAAC;AAAS;mBAP1B;;EAAAC,GAAA;AAAA;gEAoBMC,mBAAA,CAA8B,YAA1B,uBAAqB;gEAEpBA,mBAAA,CAAwB,gBAAhB,SAAO;iEACfA,mBAAA,CAA2B,gBAAnB,YAAU;iEAClBA,mBAAA,CAAkC,gBAA1B,mBAAiB;iEAC5BA,mBAAA,CAAI;;EAzBZD,GAAA;AAAA;iEA+BMC,mBAAA,CAA2B,WAAxB,sBAAoB;;uBA9B3BC,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJF,mBAAA,CAAiD,MAAjDG,UAAiD,EAAAC,gBAAA,CAAjBC,KAAA,CAAAC,IAAI,CAACC,IAAI,kBAC9BC,QAAA,CAAAC,eAAe,KAAKJ,KAAA,CAAAK,aAAa,I,cAA5CT,mBAAA,CAcM,OAjBVU,UAAA,GAIMX,mBAAA,CAEM,OAFNY,UAEM,GADJZ,mBAAA,CAA4C,YAAAI,gBAAA,CAArCI,QAAA,CAAAC,eAAe,CAACI,aAAa,iB,GAEtCb,mBAAA,CASM,OATNc,UASM,I,kBARJb,mBAAA,CAOMc,SAAA,QAfdC,WAAA,CASoCX,KAAA,CAAAY,eAAe,EATnD,CASkBC,MAAM,EAAEC,KAAK;yBADvBlB,mBAAA,CAOM;MALHF,GAAG,EAAEoB,KAAK;MACXrB,KAAK,EAAC,8BAA8B;MACnCsB,OAAK,EAAAC,MAAA,IAAEb,QAAA,CAAAc,YAAY,CAACJ,MAAM;wBAExBA,MAAM,CAACK,WAAW,wBAd/BC,UAAA;wCAmBoBnB,KAAA,CAAAK,aAAa,I,cAA7BT,mBAAA,CASM,OA5BVwB,UAAA,GAoBMC,UAA8B,G,kBAC9BzB,mBAAA,CAKMc,SAAA,QA1BZC,WAAA,CAqBqCX,KAAA,CAAAsB,OAAO,EArB5C,CAqBmBT,MAAM,EAAEC,KAAK;yBAA1BlB,mBAAA,CAKM;MALmCF,GAAG,EAAEoB;IAAK,IACjDnB,mBAAA,CAAiH,YAA9G4B,UAAwB,EAtBnCC,gBAAA,CAsBmC,GAAC,GAAAzB,gBAAA,CAAGC,KAAA,CAAAyB,SAAS,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,EAAE,KAAKf,MAAM,CAACgB,UAAU,EAAErB,aAAa,iB,GAC1Gb,mBAAA,CAA0D,YAAvDmC,WAA2B,EAvBtCN,gBAAA,CAuBsC,GAAC,GAAAzB,gBAAA,CAAGc,MAAM,CAACkB,UAAU,iB,GACnDpC,mBAAA,CAA6G,YAA1GqC,WAAkC,EAxB7CR,gBAAA,CAwB6C,GAAC,GAAAzB,gBAAA,CAAGC,KAAA,CAAAyB,SAAS,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,EAAE,KAAKf,MAAM,CAACgB,UAAU,kB,GACrGI,WAAI,C;kCAENtC,mBAAA,CAAsE;IAA9DF,KAAK,EAAC,iBAAiB;IAAEsB,OAAK,EAAAmB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhC,QAAA,CAAAiC,UAAA,IAAAjC,QAAA,CAAAiC,UAAA,IAAAD,IAAA,CAAU;KAAE,WAAS,E,oBAG/DvC,mBAAA,CAGM,OAjCVyC,WAAA,GA+BMC,WAA2B,EAC3B3C,mBAAA,CAAsE;IAA9DF,KAAK,EAAC,iBAAiB;IAAEsB,OAAK,EAAAmB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhC,QAAA,CAAAiC,UAAA,IAAAjC,QAAA,CAAAiC,UAAA,IAAAD,IAAA,CAAU;KAAE,WAAS,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}