{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport http from \"../../http-common\";\nexport default {\n  name: \"GoQuiz\",\n  data() {\n    return {\n      quiz: {},\n      questions: [],\n      currentQuestionIndex: 0,\n      answers: [],\n      shuffledAnswers: [],\n      quizCompleted: false // Состояние завершенности викторины\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\n    }\n  },\n  methods: {\n    // Получение данных викторины\n    fetchQuiz() {\n      const quizId = this.$route.params.id;\n      if (quizId) {\n        http.get(`/getQuiz/${quizId}`).then(response => {\n          console.log(response.data); // Проверяем структуру данных\n          this.quiz = response.data.quizz;\n          this.questions = response.data.questions; // Убедитесь, что здесь массив вопросов\n          console.log(this.questions);\n          this.shuffleAnswers();\n        }).catch(error => {\n          console.error(\"Ошибка при получении викторины: \", error);\n        });\n      } else {\n        console.error(\"ID викторины не найден в URL.\");\n      }\n    },\n    // Перемешивание ответов текущего вопроса\n    shuffleAnswers() {\n      if (this.currentQuestion && this.currentQuestion.answers) {\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\n      }\n    },\n    // Выбор ответа\n    selectAnswer(answer) {\n      // Проверяем, есть ли текущий вопрос\n      if (!this.currentQuestion) {\n        console.error(\"Текущий вопрос не определен.\"); // Защита от ошибок\n        return;\n      }\n\n      // Сохраняем ответ пользователя\n      console.log(answer);\n      this.answers.push({\n        questionId: this.currentQuestion.id,\n        // Получаем id текущего вопроса\n        userAnswer: answer.answer_text,\n        isCorrect: answer.isCorrect\n      });\n\n      // Увеличиваем индекс текущего вопроса\n      this.currentQuestionIndex++;\n\n      // Проверяем, достигли ли мы конца вопросов\n      if (this.currentQuestionIndex < this.questions.length) {\n        // Если вопросы остались, перемешиваем ответы следующего вопроса\n        this.shuffleAnswers();\n      } else {\n        // Если вопросов больше нет, помечаем викторину как завершенную\n        this.quizCompleted = true;\n      }\n    },\n    // Завершение викторины\n    finishQuiz() {\n      const results = {\n        quizId: this.quiz.id,\n        answers: this.answers\n      };\n      http.post(\"/submitResults\", results).then(() => {\n        alert(\"Результаты успешно сохранены!\");\n        this.$router.push(\"/allQuizzes\");\n      }).catch(error => {\n        console.error(\"Ошибка при сохранении результатов: \", error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\n  }\n};","map":{"version":3,"names":["http","name","data","quiz","questions","currentQuestionIndex","answers","shuffledAnswers","quizCompleted","computed","currentQuestion","methods","fetchQuiz","quizId","$route","params","id","get","then","response","console","log","quizz","shuffleAnswers","catch","error","sort","Math","random","selectAnswer","answer","push","questionId","userAnswer","answer_text","isCorrect","length","finishQuiz","results","post","alert","$router","mounted"],"sources":["X:\\Downoloads\\SecondProject\\SecondProject\\frontend\\src\\components\\quiz\\GoQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <h3 class=\"text-center mb-4\">{{ quiz.name }}</h3>\r\n    <div v-if=\"currentQuestion && !quizCompleted\">\r\n      <div class=\"question\">\r\n        <h5>{{ currentQuestion.question_text }}</h5>\r\n      </div>\r\n      <div class=\"answers\">\r\n        <div\r\n          v-for=\"(answer, index) in shuffledAnswers\"\r\n          :key=\"index\"\r\n          class=\"btn btn-outline-primary my-1\"\r\n          @click=\"selectAnswer(answer)\"\r\n        >\r\n          {{ answer.answer_text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"quizCompleted\">\r\n      <h4>Результаты викторины:</h4>\r\n      <div v-for=\"(answer, index) in answers\" :key=\"index\">\r\n        <p><strong>Вопрос:</strong> {{ questions[answer.questionId - 1]?.question_text }}</p>\r\n        <p><strong>Ваш ответ:</strong> {{ answer.userAnswer }}</p>\r\n        <p><strong>Правильный ответ:</strong> {{ questions[answer.questionId - 1]?.answers.find(a => a.isCorrect)?.answer_text }}</p>\r\n        <hr>\r\n      </div>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n\r\n    <div v-else>\r\n      <p>Викторина завершена!</p>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport http from \"../../http-common\";\r\n\r\nexport default {\r\n  name: \"GoQuiz\",\r\n  data() {\r\n    return {\r\n      quiz: {},\r\n      questions: [],\r\n      currentQuestionIndex: 0,\r\n      answers: [],\r\n      shuffledAnswers: [],\r\n      quizCompleted: false, // Состояние завершенности викторины\r\n    };\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\r\n    }\r\n  },\r\n  methods: {\r\n    // Получение данных викторины\r\n    fetchQuiz() {\r\n      const quizId = this.$route.params.id;\r\n      if (quizId) {\r\n        http.get(`/getQuiz/${quizId}`)\r\n          .then(response => {\r\n            console.log(response.data); // Проверяем структуру данных\r\n            this.quiz = response.data.quizz;\r\n            this.questions = response.data.questions; // Убедитесь, что здесь массив вопросов\r\n            console.log(this.questions);\r\n            this.shuffleAnswers();\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Ошибка при получении викторины: \", error);\r\n          });\r\n      } else {\r\n        console.error(\"ID викторины не найден в URL.\");\r\n      }\r\n    },\r\n    // Перемешивание ответов текущего вопроса\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\r\n      }\r\n    },\r\n    // Выбор ответа\r\n    selectAnswer(answer) {\r\n      // Проверяем, есть ли текущий вопрос\r\n      if (!this.currentQuestion) {\r\n        console.error(\"Текущий вопрос не определен.\"); // Защита от ошибок\r\n        return;\r\n      }\r\n\r\n      // Сохраняем ответ пользователя\r\n      console.log(answer);\r\n      this.answers.push({\r\n        questionId: this.currentQuestion.id, // Получаем id текущего вопроса\r\n        userAnswer: answer.answer_text,\r\n        isCorrect: answer.isCorrect\r\n      });\r\n\r\n      // Увеличиваем индекс текущего вопроса\r\n      this.currentQuestionIndex++;\r\n\r\n      // Проверяем, достигли ли мы конца вопросов\r\n      if (this.currentQuestionIndex < this.questions.length) {\r\n        // Если вопросы остались, перемешиваем ответы следующего вопроса\r\n        this.shuffleAnswers();\r\n      } else {\r\n        // Если вопросов больше нет, помечаем викторину как завершенную\r\n        this.quizCompleted = true;\r\n      }\r\n    },\r\n    // Завершение викторины\r\n    finishQuiz() {\r\n      const results = {\r\n        quizId: this.quiz.id,\r\n        answers: this.answers\r\n      };\r\n      http.post(\"/submitResults\", results)\r\n        .then(() => {\r\n          alert(\"Результаты успешно сохранены!\");\r\n          this.$router.push(\"/allQuizzes\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Ошибка при сохранении результатов: \", error);\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  text-align: center; /* Центрируем текст внутри контейнера */\r\n}\r\n\r\nh3 {\r\n  font-weight: bold; /* Жирный шрифт */\r\n  font-size: 24px; /* Размер шрифта */\r\n  margin-bottom: 20px; /* Отступ снизу */\r\n  color: #2c3e50; /* Цвет заголовка */\r\n}\r\n\r\n.question {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.answers {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center; /* Центрируем кнопки по горизонтали */\r\n}\r\n\r\n.btn {\r\n  width: 100%; /* Задаем ширину кнопок, чтобы они заполняли контейнер */\r\n  max-width: 300px; /* Ограничиваем максимальную ширину кнопок */\r\n}\r\n</style>\r\n"],"mappings":";AAsCA,OAAOA,IAAG,MAAO,mBAAmB;AAEpC,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC,CAAC;MACRC,SAAS,EAAE,EAAE;MACbC,oBAAoB,EAAE,CAAC;MACvBC,OAAO,EAAE,EAAE;MACXC,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,KAAK,CAAE;IACxB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACN,SAAS,CAAC,IAAI,CAACC,oBAAoB,CAAC,EAAE;IACpD;EACF,CAAC;EACDM,OAAO,EAAE;IACP;IACAC,SAASA,CAAA,EAAG;MACV,MAAMC,MAAK,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MACpC,IAAIH,MAAM,EAAE;QACVb,IAAI,CAACiB,GAAG,CAAE,YAAWJ,MAAO,EAAC,EAC1BK,IAAI,CAACC,QAAO,IAAK;UAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACjB,IAAI,CAAC,EAAE;UAC5B,IAAI,CAACC,IAAG,GAAIgB,QAAQ,CAACjB,IAAI,CAACoB,KAAK;UAC/B,IAAI,CAAClB,SAAQ,GAAIe,QAAQ,CAACjB,IAAI,CAACE,SAAS,EAAE;UAC1CgB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,SAAS,CAAC;UAC3B,IAAI,CAACmB,cAAc,CAAC,CAAC;QACvB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACdL,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D,CAAC,CAAC;MACN,OAAO;QACLL,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;MAChD;IACF,CAAC;IACD;IACAF,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACb,eAAc,IAAK,IAAI,CAACA,eAAe,CAACJ,OAAO,EAAE;QACxD,IAAI,CAACC,eAAc,GAAI,CAAC,GAAG,IAAI,CAACG,eAAe,CAACJ,OAAO,CAAC,CAACoB,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,CAAC;MAC1F;IACF,CAAC;IACD;IACAC,YAAYA,CAACC,MAAM,EAAE;MACnB;MACA,IAAI,CAAC,IAAI,CAACpB,eAAe,EAAE;QACzBU,OAAO,CAACK,KAAK,CAAC,8BAA8B,CAAC,EAAE;QAC/C;MACF;;MAEA;MACAL,OAAO,CAACC,GAAG,CAACS,MAAM,CAAC;MACnB,IAAI,CAACxB,OAAO,CAACyB,IAAI,CAAC;QAChBC,UAAU,EAAE,IAAI,CAACtB,eAAe,CAACM,EAAE;QAAE;QACrCiB,UAAU,EAAEH,MAAM,CAACI,WAAW;QAC9BC,SAAS,EAAEL,MAAM,CAACK;MACpB,CAAC,CAAC;;MAEF;MACA,IAAI,CAAC9B,oBAAoB,EAAE;;MAE3B;MACA,IAAI,IAAI,CAACA,oBAAmB,GAAI,IAAI,CAACD,SAAS,CAACgC,MAAM,EAAE;QACrD;QACA,IAAI,CAACb,cAAc,CAAC,CAAC;MACvB,OAAO;QACL;QACA,IAAI,CAACf,aAAY,GAAI,IAAI;MAC3B;IACF,CAAC;IACD;IACA6B,UAAUA,CAAA,EAAG;MACX,MAAMC,OAAM,GAAI;QACdzB,MAAM,EAAE,IAAI,CAACV,IAAI,CAACa,EAAE;QACpBV,OAAO,EAAE,IAAI,CAACA;MAChB,CAAC;MACDN,IAAI,CAACuC,IAAI,CAAC,gBAAgB,EAAED,OAAO,EAChCpB,IAAI,CAAC,MAAM;QACVsB,KAAK,CAAC,+BAA+B,CAAC;QACtC,IAAI,CAACC,OAAO,CAACV,IAAI,CAAC,aAAa,CAAC;MAClC,CAAC,EACAP,KAAK,CAACC,KAAI,IAAK;QACdL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC;EACDiB,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC9B,SAAS,CAAC,CAAC,EAAE;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}