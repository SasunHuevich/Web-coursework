{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-945499d2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container mt-5\"\n};\nconst _hoisted_2 = {\n  class: \"text-center mb-4\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"question\"\n};\nconst _hoisted_5 = {\n  class: \"answers\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Викторина завершена!\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, _toDisplayString(_ctx.data.quizz), 1 /* TEXT */), $options.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h5\", null, _toDisplayString($options.currentQuestion.text), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.shuffledAnswers, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"btn btn-outline-primary my-1\",\n      onClick: $event => $options.selectAnswer(answer)\n    }, _toDisplayString(answer.text), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_hoisted_8, _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.finishQuiz && $options.finishQuiz(...args))\n  }, \"Завершить\")]))]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","data","quizz","$options","currentQuestion","_hoisted_3","_hoisted_4","text","_hoisted_5","_Fragment","_renderList","$data","shuffledAnswers","answer","index","onClick","$event","selectAnswer","_hoisted_6","_hoisted_7","_hoisted_8","_cache","args","finishQuiz"],"sources":["X:\\Downoloads\\SecondProject\\SecondProject\\frontend\\src\\components\\quiz\\GoQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <h3 class=\"text-center mb-4\">{{ data.quizz }}</h3>\r\n    <div v-if=\"currentQuestion\">\r\n      <div class=\"question\">\r\n        <h5>{{ currentQuestion.text }}</h5>\r\n      </div>\r\n      <div class=\"answers\">\r\n        <div\r\n          v-for=\"(answer, index) in shuffledAnswers\"\r\n          :key=\"index\"\r\n          class=\"btn btn-outline-primary my-1\"\r\n          @click=\"selectAnswer(answer)\"\r\n        >\r\n          {{ answer.text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>Викторина завершена!</p>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport http from \"../../http-common\";\r\n\r\nexport default {\r\n  name: \"GoQuiz\",\r\n  data() {\r\n    return {\r\n      quizz: {}, // Объект викторины\r\n      questions: [], // Вопросы викторины\r\n      currentQuestionIndex: 0, // Индекс текущего вопроса\r\n      answers: [], // Ответы пользователя\r\n      shuffledAnswers: [] // Перемешанные ответы\r\n    };\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\r\n    }\r\n  },\r\n  methods: {\r\n    // Получение данных викторины\r\n    fetchQuiz() {\r\n      const quizId = this.$route.params.id; // Получаем ID викторины из параметров маршрута\r\n      if (quizId) { // Проверка, если quizId определен\r\n        http.get(`/getQuiz/${quizId}`)\r\n          .then(response => {\r\n            console.log(response.data); // Для отладки\r\n            this.quizz = response.data.quiz; // Заменено с quiz на quizz\r\n            this.questions = response.data.questions; // Убедитесь, что у вас есть этот массив\r\n            this.shuffleAnswers(); // Перемешиваем ответы первого вопроса\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Ошибка при получении викторины: \", error);\r\n          });\r\n      } else {\r\n        console.error(\"ID викторины не найден в URL.\");\r\n      }\r\n    },\r\n\r\n    // Перемешивание ответов текущего вопроса\r\n    shuffleAnswers() {\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\r\n      }\r\n    },\r\n\r\n    // Выбор ответа\r\n    selectAnswer(answer) {\r\n      this.answers.push({\r\n        questionId: this.currentQuestion.id,\r\n        userAnswer: answer,\r\n        isCorrect: answer.isCorrect // Предполагаем, что есть поле isCorrect в ответе\r\n      });\r\n      this.currentQuestionIndex++;\r\n      this.shuffleAnswers(); // Перемешиваем ответы для следующего вопроса\r\n    },\r\n\r\n    // Завершение викторины\r\n    finishQuiz() {\r\n      const results = {\r\n        quizId: this.quizz.id, // Заменено с quiz на quizz\r\n        answers: this.answers\r\n      };\r\n      http.post(\"/submitResults\", results)\r\n        .then(() => {\r\n          alert(\"Результаты успешно сохранены!\");\r\n          this.$router.push(\"/allQuizzes\"); // Возвращаем на страницу викторин\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Ошибка при сохранении результатов: \", error);\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.question {\r\n  margin-bottom: 20px;\r\n}\r\n.answers {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;EACrBA,KAAK,EAAC;AAAkB;;EAFhCC,GAAA;AAAA;;EAIWD,KAAK,EAAC;AAAU;;EAGhBA,KAAK,EAAC;AAAS;mBAP1B;;EAAAC,GAAA;AAAA;gEAmBMC,mBAAA,CAA2B,WAAxB,sBAAoB;;uBAlB3BC,mBAAA,CAqBM,OArBNC,UAqBM,GApBJF,mBAAA,CAAkD,MAAlDG,UAAkD,EAAAC,gBAAA,CAAlBC,IAAA,CAAAC,IAAI,CAACC,KAAK,kBAC/BC,QAAA,CAAAC,eAAe,I,cAA1BR,mBAAA,CAcM,OAjBVS,UAAA,GAIMV,mBAAA,CAEM,OAFNW,UAEM,GADJX,mBAAA,CAAmC,YAAAI,gBAAA,CAA5BI,QAAA,CAAAC,eAAe,CAACG,IAAI,iB,GAE7BZ,mBAAA,CASM,OATNa,UASM,I,kBARJZ,mBAAA,CAOMa,SAAA,QAfdC,WAAA,CASoCC,KAAA,CAAAC,eAAe,EATnD,CASkBC,MAAM,EAAEC,KAAK;yBADvBlB,mBAAA,CAOM;MALHF,GAAG,EAAEoB,KAAK;MACXrB,KAAK,EAAC,8BAA8B;MACnCsB,OAAK,EAAAC,MAAA,IAAEb,QAAA,CAAAc,YAAY,CAACJ,MAAM;wBAExBA,MAAM,CAACN,IAAI,wBAdxBW,UAAA;uDAkBItB,mBAAA,CAGM,OArBVuB,UAAA,GAmBMC,UAA2B,EAC3BzB,mBAAA,CAAsE;IAA9DF,KAAK,EAAC,iBAAiB;IAAEsB,OAAK,EAAAM,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,QAAA,CAAAoB,UAAA,IAAApB,QAAA,CAAAoB,UAAA,IAAAD,IAAA,CAAU;KAAE,WAAS,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}