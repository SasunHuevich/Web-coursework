{"ast":null,"code":"import AuthService from '../services/auth.service';\nvar user = JSON.parse(localStorage.getItem('user'));\n\n// состояния: авторизованный или неавторизованный пользователь\nconst state = () => ({\n  authData: {\n    token: \"\",\n    refreshToken: \"\",\n    tokenExp: \"\"\n  },\n  status: user ? {\n    loggedIn: true\n  } : {\n    loggedIn: false\n  },\n  user: user ? user : null\n});\n\n// получение данных\nconst getters = {\n  getLoginStatus(state) {\n    return state.status;\n  },\n  getAuthData() {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    return {\n      user: user\n    };\n  },\n  isTokenActive() {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const tokenExp = JSON.parse(localStorage.getItem(\"tokenExp\"));\n    if (!user || !tokenExp) {\n      return false;\n    }\n    var result = AuthService.tokenAlive(tokenExp);\n    return result;\n  }\n};\n\n// действия: 1 - вход (login), 2 - выход (logout), 3 - регистрация (register), 4 - проверка токена (refreshToken)\nconst actions = {\n  login({\n    commit\n  }, user) {\n    return AuthService.login(user).then(user => {\n      commit(\"loginSuccess\", user);\n      // Promise - объект, представляющий результат успешного или неудачного завершения операции\n      return Promise.resolve(user);\n    }, error => {\n      commit('loginFailure');\n      return Promise.reject(error);\n    });\n  },\n  logout({\n    commit\n  }) {\n    AuthService.logout();\n    commit('logout');\n  },\n  register({\n    commit\n  }, user) {\n    return AuthService.register(user).then(response => {\n      commit('registerSuccess');\n      // Promise - объект, представляющий результат успешного или неудачного завершения операции.\n      return Promise.resolve(response.data);\n    }, error => {\n      commit('registerFailure');\n      return Promise.reject(error);\n    });\n  },\n  refreshToken({\n    commit\n  }, user) {\n    return AuthService.refreshToken(user).then(user => {\n      commit('saveTokenData', user);\n      return Promise.resolve(user);\n    }, error => {\n      console.log(error);\n      return Promise.reject(error);\n    });\n  }\n};\n\n// Мутации. Позволяют изменять состояние хранилища во Vuex. Сохраняют данные пользователя и токена в локальное хранилище в браузере. Также удаляют данные пользователя\nconst mutations = {\n  loginSuccess(state, user) {\n    state.status.loggedIn = true;\n    state.user = user;\n    const jwtDecodedValue = AuthService.jwtDecrypt(user.accessToken);\n    const newTokenData = {\n      token: user.accessToken,\n      tokenExp: jwtDecodedValue.exp\n    };\n    localStorage.setItem('tokenExp', JSON.stringify(newTokenData.tokenExp));\n    state.authData = newTokenData;\n  },\n  loginFailure(state) {\n    state.status.loggedIn = false;\n    state.user = null;\n  },\n  logout(state) {\n    state.status.loggedIn = false;\n    state.user = null;\n  },\n  registerSuccess(state) {\n    state.status.loggedIn = false;\n  },\n  registerFailure(state) {\n    state.status.loggedIn = false;\n  },\n  saveTokenData(state, user) {\n    const jwtDecodedValue = AuthService.jwtDecrypt(user.accessToken);\n    const newTokenData = {\n      token: user.accessToken,\n      tokenExp: jwtDecodedValue.exp\n    };\n    state.authData = newTokenData;\n  },\n  setLoginStatus(state, value) {\n    state.loginStatus = value;\n  }\n};\nexport default {\n  // Разделяем state, getters, actions и mutations, устанавливая namespaced в значение true\n  // К методам необходимо будет обращаться через указание state, getters, actions или mutations\n  // Это сделано для того, чтобы избежать возможных конфликтов между именами методов\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","state","authData","token","refreshToken","tokenExp","status","loggedIn","getters","getLoginStatus","getAuthData","isTokenActive","result","tokenAlive","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","console","log","mutations","loginSuccess","jwtDecodedValue","jwtDecrypt","accessToken","newTokenData","exp","setItem","stringify","loginFailure","registerSuccess","registerFailure","saveTokenData","setLoginStatus","value","loginStatus","namespaced"],"sources":["X:/Downoloads/SecondProject/SecondProject/frontend/src/store/auth.module.js"],"sourcesContent":["import AuthService from '../services/auth.service';\r\nvar user = JSON.parse(localStorage.getItem('user'));\r\n\r\n// состояния: авторизованный или неавторизованный пользователь\r\nconst state = () => ({\r\n    authData: {\r\n        token: \"\",\r\n        refreshToken: \"\",\r\n        tokenExp: \"\"\r\n    },\r\n    status: user ? { loggedIn: true } : { loggedIn: false },\r\n    user: user ? user : null\r\n});\r\n\r\n// получение данных\r\nconst getters = {\r\n    getLoginStatus(state) {\r\n        return state.status;\r\n    },\r\n    getAuthData() {\r\n        const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n        return {\r\n            user: user\r\n        };\r\n    },\r\n    isTokenActive() {\r\n        const user = JSON.parse(localStorage.getItem(\"user\"));\r\n        const tokenExp = JSON.parse(localStorage.getItem(\"tokenExp\"));\r\n        if (!user || !tokenExp) {\r\n            return false;\r\n        }\r\n        var result = AuthService.tokenAlive(tokenExp);\r\n        return result;\r\n\r\n    }\r\n};\r\n\r\n// действия: 1 - вход (login), 2 - выход (logout), 3 - регистрация (register), 4 - проверка токена (refreshToken)\r\nconst actions = {\r\n    login({ commit }, user) {\r\n        return AuthService.login(user).then(\r\n            user => {\r\n                commit(\"loginSuccess\", user);\r\n                // Promise - объект, представляющий результат успешного или неудачного завершения операции\r\n                return Promise.resolve(user);\r\n            },\r\n            error => {\r\n                commit('loginFailure');\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    },\r\n    logout({ commit }) {\r\n        AuthService.logout();\r\n        commit('logout');\r\n    },\r\n    register({ commit }, user) {\r\n        return AuthService.register(user).then(\r\n            response => {\r\n                commit('registerSuccess');\r\n                // Promise - объект, представляющий результат успешного или неудачного завершения операции.\r\n                return Promise.resolve(response.data);\r\n            },\r\n            error => {\r\n                commit('registerFailure');\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    },\r\n    refreshToken({ commit }, user) {\r\n        return AuthService.refreshToken(user).then(\r\n            user => {\r\n                commit('saveTokenData', user);\r\n                return Promise.resolve(user);\r\n            },\r\n            error => {\r\n                console.log(error);\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n// Мутации. Позволяют изменять состояние хранилища во Vuex. Сохраняют данные пользователя и токена в локальное хранилище в браузере. Также удаляют данные пользователя\r\nconst mutations = {\r\n    loginSuccess(state, user) {\r\n        state.status.loggedIn = true;\r\n        state.user = user;\r\n        const jwtDecodedValue = AuthService.jwtDecrypt(user.accessToken);\r\n        const newTokenData = {\r\n            token: user.accessToken,\r\n            tokenExp: jwtDecodedValue.exp\r\n        };\r\n        localStorage.setItem('tokenExp', JSON.stringify(newTokenData.tokenExp));\r\n        state.authData = newTokenData;\r\n    },\r\n    loginFailure(state) {\r\n        state.status.loggedIn = false;\r\n        state.user = null;\r\n    },\r\n    logout(state) {\r\n        state.status.loggedIn = false;\r\n        state.user = null;\r\n    },\r\n    registerSuccess(state) {\r\n        state.status.loggedIn = false;\r\n    },\r\n    registerFailure(state) {\r\n        state.status.loggedIn = false;\r\n    },\r\n    saveTokenData(state, user) {\r\n        const jwtDecodedValue = AuthService.jwtDecrypt(user.accessToken);\r\n        const newTokenData = {\r\n            token: user.accessToken,\r\n            tokenExp: jwtDecodedValue.exp\r\n        };\r\n        state.authData = newTokenData;\r\n    },\r\n    setLoginStatus(state, value) {\r\n        state.loginStatus = value;\r\n    }\r\n};\r\n\r\nexport default {\r\n    // Разделяем state, getters, actions и mutations, устанавливая namespaced в значение true\r\n    // К методам необходимо будет обращаться через указание state, getters, actions или mutations\r\n    // Это сделано для того, чтобы избежать возможных конфликтов между именами методов\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}