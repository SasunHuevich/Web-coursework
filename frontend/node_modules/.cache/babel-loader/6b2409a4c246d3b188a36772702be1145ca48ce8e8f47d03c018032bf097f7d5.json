{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport http from \"../http-common\";\n\n// отправка данных на сторону сервера для того, чтобы пользователь мог авторизоваться в системе\nfunction login(user) {\n  var data = {\n    username: user.username,\n    password: user.password\n  };\n  return http.post(\"/login\", data).then(response => {\n    if (response.data.accessToken) {\n      // записываем данные пользователя в локальное хранилище, которое находится в браузере\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  });\n}\n\n// обработка выхода пользователя\nfunction logout() {\n  // при нажатии кнопки \"Выйти\" удаляем данные пользователя из локального хранилища\n  localStorage.removeItem('user');\n}\n\n// обработка регистрации пользователя\nfunction register(user) {\n  var data = {\n    username: user.username,\n    password: user.password\n  };\n  console.log(data);\n  return http.post(\"/register\", data);\n}\n\n// обработка обновления токена\n// на стороне сервера установили время действия токена, если после указанного времени пользователь всё ещё работает в системе,\n// то нужно сгенерировать другой токен\nfunction refreshToken(user) {\n  var data = {\n    username: user.username\n  };\n  return http.post(\"/refreshToken\", data).then(response => {\n    if (response.data.accessToken) {\n      localStorage.setItem('user', JSON.stringify(response.data)); // записываем данные пользователя в локальное хранилище, которое хранится в браузере\n    }\n    return response.data;\n  });\n}\n\n// декодируем токен jwt, чтобы в вызывающем методе использовать время (понадобится для проверки срока действия токена)\nfunction jwtDecrypt(token) {\n  var base64Url = token.split(\".\")[1];\n  var base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  var jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(c => {\n    return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(\"\"));\n  return JSON.parse(jsonPayload);\n}\n\n// проверяем срока действия токена\nfunction tokenAlive(exp) {\n  // Date.now() - возвращает дату сразу в виде миллисекунд\n  // exp - время из JWT токена по формату Unix Time\n  // Чтобы сравнить время, нужно exp перевести в миллисекунды\n  if (Date.now() >= exp * 1000) {\n    return false;\n  }\n  return true;\n}\nexport default {\n  login: login,\n  logout: logout,\n  register: register,\n  refreshToken: refreshToken,\n  jwtDecrypt: jwtDecrypt,\n  tokenAlive: tokenAlive\n};","map":{"version":3,"names":["http","login","user","data","username","password","post","then","response","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","console","log","refreshToken","jwtDecrypt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","parse","tokenAlive","exp","Date","now"],"sources":["X:/Downoloads/SecondProject/SecondProject/frontend/src/services/auth.service.js"],"sourcesContent":["import http from \"../http-common\";\r\n\r\n// отправка данных на сторону сервера для того, чтобы пользователь мог авторизоваться в системе\r\nfunction login(user) {\r\n    var data = {\r\n        username: user.username,\r\n        password: user.password\r\n    };\r\n    return http\r\n        .post(\"/login\", data)\r\n        .then(response => {\r\n            if (response.data.accessToken) {\r\n                // записываем данные пользователя в локальное хранилище, которое находится в браузере\r\n                localStorage.setItem('user', JSON.stringify(response.data));\r\n            }\r\n            return response.data;\r\n        });\r\n}\r\n\r\n// обработка выхода пользователя\r\nfunction logout() {\r\n    // при нажатии кнопки \"Выйти\" удаляем данные пользователя из локального хранилища\r\n    localStorage.removeItem('user');\r\n}\r\n\r\n// обработка регистрации пользователя\r\nfunction register(user) {\r\n    var data = {\r\n        username: user.username,\r\n        password: user.password\r\n    };\r\n    console.log(data)\r\n    return http.post(\"/register\", data);\r\n}\r\n\r\n// обработка обновления токена\r\n// на стороне сервера установили время действия токена, если после указанного времени пользователь всё ещё работает в системе,\r\n// то нужно сгенерировать другой токен\r\nfunction refreshToken(user) {\r\n    var data = {\r\n        username: user.username\r\n    };\r\n    return http\r\n        .post(\"/refreshToken\", data)\r\n        .then(response => {\r\n            if (response.data.accessToken) {\r\n                localStorage.setItem('user', JSON.stringify(response.data));// записываем данные пользователя в локальное хранилище, которое хранится в браузере\r\n            }\r\n            return response.data;\r\n        });\r\n}\r\n\r\n// декодируем токен jwt, чтобы в вызывающем методе использовать время (понадобится для проверки срока действия токена)\r\nfunction jwtDecrypt(token) {\r\n    var base64Url = token.split(\".\")[1];\r\n    var base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n    var jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n            .split(\"\")\r\n            .map((c) => {\r\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n            })\r\n            .join(\"\")\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n}\r\n\r\n// проверяем срока действия токена\r\nfunction tokenAlive(exp) {\r\n    // Date.now() - возвращает дату сразу в виде миллисекунд\r\n    // exp - время из JWT токена по формату Unix Time\r\n    // Чтобы сравнить время, нужно exp перевести в миллисекунды\r\n    if (Date.now() >= exp * 1000) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default {\r\n    login: login,\r\n    logout: logout,\r\n    register: register,\r\n    refreshToken: refreshToken,\r\n    jwtDecrypt: jwtDecrypt,\r\n    tokenAlive: tokenAlive\r\n};"],"mappings":";AAAA,OAAOA,IAAI,MAAM,gBAAgB;;AAEjC;AACA,SAASC,KAAKA,CAACC,IAAI,EAAE;EACjB,IAAIC,IAAI,GAAG;IACPC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;IACvBC,QAAQ,EAAEH,IAAI,CAACG;EACnB,CAAC;EACD,OAAOL,IAAI,CACNM,IAAI,CAAC,QAAQ,EAAEH,IAAI,CAAC,CACpBI,IAAI,CAACC,QAAQ,IAAI;IACd,IAAIA,QAAQ,CAACL,IAAI,CAACM,WAAW,EAAE;MAC3B;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACL,IAAI,CAAC,CAAC;IAC/D;IACA,OAAOK,QAAQ,CAACL,IAAI;EACxB,CAAC,CAAC;AACV;;AAEA;AACA,SAASW,MAAMA,CAAA,EAAG;EACd;EACAJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;AACnC;;AAEA;AACA,SAASC,QAAQA,CAACd,IAAI,EAAE;EACpB,IAAIC,IAAI,GAAG;IACPC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;IACvBC,QAAQ,EAAEH,IAAI,CAACG;EACnB,CAAC;EACDY,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;EACjB,OAAOH,IAAI,CAACM,IAAI,CAAC,WAAW,EAAEH,IAAI,CAAC;AACvC;;AAEA;AACA;AACA;AACA,SAASgB,YAAYA,CAACjB,IAAI,EAAE;EACxB,IAAIC,IAAI,GAAG;IACPC,QAAQ,EAAEF,IAAI,CAACE;EACnB,CAAC;EACD,OAAOJ,IAAI,CACNM,IAAI,CAAC,eAAe,EAAEH,IAAI,CAAC,CAC3BI,IAAI,CAACC,QAAQ,IAAI;IACd,IAAIA,QAAQ,CAACL,IAAI,CAACM,WAAW,EAAE;MAC3BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC;IAChE;IACA,OAAOK,QAAQ,CAACL,IAAI;EACxB,CAAC,CAAC;AACV;;AAEA;AACA,SAASiB,UAAUA,CAACC,KAAK,EAAE;EACvB,IAAIC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnC,IAAIC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC5D,IAAIC,WAAW,GAAGC,kBAAkB,CAChCC,IAAI,CAACJ,MAAM,CAAC,CACPD,KAAK,CAAC,EAAE,CAAC,CACTM,GAAG,CAAEC,CAAC,IAAK;IACR,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC,CACDC,IAAI,CAAC,EAAE,CAChB,CAAC;EACD,OAAOtB,IAAI,CAACuB,KAAK,CAACT,WAAW,CAAC;AAClC;;AAEA;AACA,SAASU,UAAUA,CAACC,GAAG,EAAE;EACrB;EACA;EACA;EACA,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIF,GAAG,GAAG,IAAI,EAAE;IAC1B,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AAEA,eAAe;EACXpC,KAAK,EAAEA,KAAK;EACZa,MAAM,EAAEA,MAAM;EACdE,QAAQ,EAAEA,QAAQ;EAClBG,YAAY,EAAEA,YAAY;EAC1BC,UAAU,EAAEA,UAAU;EACtBgB,UAAU,EAAEA;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}