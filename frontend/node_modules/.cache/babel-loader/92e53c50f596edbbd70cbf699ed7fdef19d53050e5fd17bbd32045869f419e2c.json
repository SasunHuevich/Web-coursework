{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport http from \"../../http-common\";\nexport default {\n  name: \"GoQuiz\",\n  data() {\n    return {\n      quiz: {},\n      // Объект викторины\n      questions: [],\n      // Вопросы викторины\n      currentQuestionIndex: 0,\n      // Индекс текущего вопроса\n      answers: [],\n      // Ответы пользователя\n      shuffledAnswers: [] // Перемешанные ответы\n    };\n  },\n  computed: {\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\n    }\n  },\n  methods: {\n    // Получение данных викторины\n    fetchQuiz() {\n      const quizId = this.$route.params.id; // Получаем ID викторины из параметров маршрута\n      if (quizId) {\n        // Проверка, если quizId определен\n        http.get(`/getQuiz/${quizId}`).then(response => {\n          console.log(response.data); // Для отладки\n          this.quiz = response.data.quizz; // Заменено с quiz на quizz\n          this.questions = response.data.questions; // Убедитесь, что у вас есть этот массив\n          this.shuffleAnswers(); // Перемешиваем ответы первого вопроса\n        }).catch(error => {\n          console.error(\"Ошибка при получении викторины: \", error);\n        });\n      } else {\n        console.error(\"ID викторины не найден в URL.\");\n      }\n    },\n    // Перемешивание ответов текущего вопроса\n    shuffleAnswers() {\n      console.log(this.currentQuestion);\n      if (this.currentQuestion && this.currentQuestion.answers) {\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\n      }\n    },\n    // Выбор ответа\n    selectAnswer(answer) {\n      this.answers.push({\n        questionId: this.currentQuestion.id,\n        userAnswer: answer,\n        isCorrect: answer.isCorrect // Предполагаем, что есть поле isCorrect в ответе\n      });\n      this.currentQuestionIndex++;\n      this.shuffleAnswers(); // Перемешиваем ответы для следующего вопроса\n    },\n    // Завершение викторины\n    finishQuiz() {\n      const results = {\n        quizId: this.quizz.id,\n        // Заменено с quiz на quizz\n        answers: this.answers\n      };\n      http.post(\"/submitResults\", results).then(() => {\n        alert(\"Результаты успешно сохранены!\");\n        this.$router.push(\"/allQuizzes\"); // Возвращаем на страницу викторин\n      }).catch(error => {\n        console.error(\"Ошибка при сохранении результатов: \", error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\n  }\n};","map":{"version":3,"names":["http","name","data","quiz","questions","currentQuestionIndex","answers","shuffledAnswers","computed","currentQuestion","methods","fetchQuiz","quizId","$route","params","id","get","then","response","console","log","quizz","shuffleAnswers","catch","error","sort","Math","random","selectAnswer","answer","push","questionId","userAnswer","isCorrect","finishQuiz","results","post","alert","$router","mounted"],"sources":["X:\\Downoloads\\SecondProject\\SecondProject\\frontend\\src\\components\\quiz\\GoQuiz.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-5\">\r\n    <h3 class=\"text-center mb-4\">{{ quiz.name }}</h3>\r\n    <div v-if=\"currentQuestion\">\r\n      <div class=\"question\">\r\n        <h5>{{ currentQuestion.text }}</h5>\r\n      </div>\r\n      <div class=\"answers\">\r\n        <div\r\n          v-for=\"(answer, index) in shuffledAnswers\"\r\n          :key=\"index\"\r\n          class=\"btn btn-outline-primary my-1\"\r\n          @click=\"selectAnswer(answer)\"\r\n        >\r\n          {{ answer.answer_text }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>Викторина завершена!</p>\r\n      <button class=\"btn btn-primary\" @click=\"finishQuiz\">Завершить</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport http from \"../../http-common\";\r\n\r\nexport default {\r\n  name: \"GoQuiz\",\r\n  data() {\r\n    return {\r\n      quiz: {}, // Объект викторины\r\n      questions: [], // Вопросы викторины\r\n      currentQuestionIndex: 0, // Индекс текущего вопроса\r\n      answers: [], // Ответы пользователя\r\n      shuffledAnswers: [] // Перемешанные ответы\r\n    };\r\n  },\r\n  computed: {\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex]; // Получаем текущий вопрос\r\n    }\r\n  },\r\n  methods: {\r\n    // Получение данных викторины\r\n    fetchQuiz() {\r\n      const quizId = this.$route.params.id; // Получаем ID викторины из параметров маршрута\r\n      if (quizId) { // Проверка, если quizId определен\r\n        http.get(`/getQuiz/${quizId}`)\r\n          .then(response => {\r\n            console.log(response.data); // Для отладки\r\n            this.quiz = response.data.quizz; // Заменено с quiz на quizz\r\n            this.questions = response.data.questions; // Убедитесь, что у вас есть этот массив\r\n            this.shuffleAnswers(); // Перемешиваем ответы первого вопроса\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Ошибка при получении викторины: \", error);\r\n          });\r\n      } else {\r\n        console.error(\"ID викторины не найден в URL.\");\r\n      }\r\n    },\r\n\r\n    // Перемешивание ответов текущего вопроса\r\n    shuffleAnswers() {\r\n      console.log(this.currentQuestion);\r\n      if (this.currentQuestion && this.currentQuestion.answers) {\r\n        this.shuffledAnswers = [...this.currentQuestion.answers].sort(() => Math.random() - 0.5);\r\n      }\r\n    },\r\n\r\n    // Выбор ответа\r\n    selectAnswer(answer) {\r\n      this.answers.push({\r\n        questionId: this.currentQuestion.id,\r\n        userAnswer: answer,\r\n        isCorrect: answer.isCorrect // Предполагаем, что есть поле isCorrect в ответе\r\n      });\r\n      this.currentQuestionIndex++;\r\n      this.shuffleAnswers(); // Перемешиваем ответы для следующего вопроса\r\n    },\r\n\r\n    // Завершение викторины\r\n    finishQuiz() {\r\n      const results = {\r\n        quizId: this.quizz.id, // Заменено с quiz на quizz\r\n        answers: this.answers\r\n      };\r\n      http.post(\"/submitResults\", results)\r\n        .then(() => {\r\n          alert(\"Результаты успешно сохранены!\");\r\n          this.$router.push(\"/allQuizzes\"); // Возвращаем на страницу викторин\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Ошибка при сохранении результатов: \", error);\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchQuiz(); // Получаем данные викторины при монтировании компонента\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.question {\r\n  margin-bottom: 20px;\r\n}\r\n.answers {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n</style>\r\n"],"mappings":";AA0BA,OAAOA,IAAG,MAAO,mBAAmB;AAEpC,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC,CAAC;MAAE;MACVC,SAAS,EAAE,EAAE;MAAE;MACfC,oBAAoB,EAAE,CAAC;MAAE;MACzBC,OAAO,EAAE,EAAE;MAAE;MACbC,eAAe,EAAE,EAAC,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACL,SAAS,CAAC,IAAI,CAACC,oBAAoB,CAAC,EAAE;IACpD;EACF,CAAC;EACDK,OAAO,EAAE;IACP;IACAC,SAASA,CAAA,EAAG;MACV,MAAMC,MAAK,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE;MACtC,IAAIH,MAAM,EAAE;QAAE;QACZZ,IAAI,CAACgB,GAAG,CAAE,YAAWJ,MAAO,EAAC,EAC1BK,IAAI,CAACC,QAAO,IAAK;UAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAChB,IAAI,CAAC,EAAE;UAC5B,IAAI,CAACC,IAAG,GAAIe,QAAQ,CAAChB,IAAI,CAACmB,KAAK,EAAE;UACjC,IAAI,CAACjB,SAAQ,GAAIc,QAAQ,CAAChB,IAAI,CAACE,SAAS,EAAE;UAC1C,IAAI,CAACkB,cAAc,CAAC,CAAC,EAAE;QACzB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACdL,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D,CAAC,CAAC;MACN,OAAO;QACLL,OAAO,CAACK,KAAK,CAAC,+BAA+B,CAAC;MAChD;IACF,CAAC;IAED;IACAF,cAAcA,CAAA,EAAG;MACfH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,eAAe,CAAC;MACjC,IAAI,IAAI,CAACA,eAAc,IAAK,IAAI,CAACA,eAAe,CAACH,OAAO,EAAE;QACxD,IAAI,CAACC,eAAc,GAAI,CAAC,GAAG,IAAI,CAACE,eAAe,CAACH,OAAO,CAAC,CAACmB,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,CAAC;MAC1F;IACF,CAAC;IAED;IACAC,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACvB,OAAO,CAACwB,IAAI,CAAC;QAChBC,UAAU,EAAE,IAAI,CAACtB,eAAe,CAACM,EAAE;QACnCiB,UAAU,EAAEH,MAAM;QAClBI,SAAS,EAAEJ,MAAM,CAACI,SAAQ,CAAE;MAC9B,CAAC,CAAC;MACF,IAAI,CAAC5B,oBAAoB,EAAE;MAC3B,IAAI,CAACiB,cAAc,CAAC,CAAC,EAAE;IACzB,CAAC;IAED;IACAY,UAAUA,CAAA,EAAG;MACX,MAAMC,OAAM,GAAI;QACdvB,MAAM,EAAE,IAAI,CAACS,KAAK,CAACN,EAAE;QAAE;QACvBT,OAAO,EAAE,IAAI,CAACA;MAChB,CAAC;MACDN,IAAI,CAACoC,IAAI,CAAC,gBAAgB,EAAED,OAAO,EAChClB,IAAI,CAAC,MAAM;QACVoB,KAAK,CAAC,+BAA+B,CAAC;QACtC,IAAI,CAACC,OAAO,CAACR,IAAI,CAAC,aAAa,CAAC,EAAE;MACpC,CAAC,EACAP,KAAK,CAACC,KAAI,IAAK;QACdL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC;EACDe,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC5B,SAAS,CAAC,CAAC,EAAE;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}